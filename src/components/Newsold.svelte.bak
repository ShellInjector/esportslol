
<!-- News.svelte -->
<script>
  import { onMount } from 'svelte';
  import { push } from 'svelte-spa-router';

  let entries = [];
  let loading = true;
  let visibleEntries = 14;
  let skipEntries = 0;
  let selectedCategories = [];

  const shuffleArray = (array) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  };

  onMount(async () => {
    try {
      const articles = [];
      const videos = [];

      for (let i = 0; i <= 600; i += 100) {
        const response = await fetch(`https://wrapper-eight.vercel.app/articles/${i}`, {
          headers: {
            'Access_token': 'cs9bf74a8cc357da4224f2b444',
            'Api_key': 'bltad9188aa9a70543a'
          }
        });
        const data = await response.json();
        articles.push(...data.entries.map(entry => ({
          ...entry,
          type: 'article',
        })));
      }

      for (let i = 0; i <= 900; i += 100) {
        const response = await fetch(`https://wrapper-eight.vercel.app/videos/${i}`, {
          headers: {
            'Access_token': 'cs9bf74a8cc357da4224f2b444',
            'Api_key': 'bltad9188aa9a70543a'
          }
        });
        const data = await response.json();
        videos.push(...data.entries.map(entry => ({
          ...entry,
          type: 'video',
        })));
      }

      const combinedEntries = [...articles, ...videos];
      entries = shuffleArray(combinedEntries);
      loading = false;
      updateVisibleEntries();
    } catch (error) {
      console.log(error);
    }
  });

  let currentEntries = [];

  const handleLoadMore = () => {
    visibleEntries += 14;
    if (visibleEntries >= entries.length) {
      skipEntries += 100;
      loadMoreEntries();
    } else {
      updateVisibleEntries();
    }
  };

  const loadMoreEntries = async () => {
    try {
      const response = await fetch(`https://wrapper-eight.vercel.app/articles/${skipEntries}`, {
        headers: {
          'Access_token': 'cs9bf74a8cc357da4224f2b444',
          'Api_key': 'bltad9188aa9a70543a'
        }
      });
      const data = await response.json();
      const newEntries = data.entries.map(entry => ({
        ...entry,
        type: 'article',
      }));
      entries.push(...newEntries);
      updateVisibleEntries();
    } catch (error) {
      console.log(error);
    }
  };

  const applyFilter = () => {
    visibleEntries = 14;
    updateVisibleEntries();
  };

  const updateVisibleEntries = () => {
    let filteredEntries = entries;

    if (selectedCategories.length > 0) {
      filteredEntries = entries.filter(entry => selectedCategories.includes(entry.type));
    }

    currentEntries = filteredEntries.slice(0, visibleEntries);
  };

  const shareOnTwitter = (entry, message) => {
    const url = encodeURIComponent(entry.url);
    const tweet = encodeURIComponent(message);
    const twitterUrl = `https://twitter.com/intent/tweet?url=${url}&text=${tweet}`;
    window.open(twitterUrl, '_blank');
  };

const handleArticleClick = async (entry) => {
    try {
      const response = await fetch(`https://cdn.contentstack.io/v3/content_types/articles/entries/${entry.uid}?environment=production&bustcache=bustcache&locale=en-gb&include[]=league&include[]=author`, {
        headers: {
          'Access_token': 'cs9bf74a8cc357da4224f2b444',
          'Api_key': 'bltad9188aa9a70543a'
        }
      });
      const data = await response.json();
      push(`/articles/${entry.uid}`, { state: { articleData: data } });
    } catch (error) {
      console.log(error);
    }
  };

</script>

<div class="filter-bar">
  <div class="filter-title">
    <span class="filter-line"></span>
    <h3>Filter</h3>
  </div>
  <label>
    <input type="checkbox" value="article" bind:checked="{selectedCategories}" on:change="{applyFilter}">
    Articles
  </label>
  <label>
    <input type="checkbox" value="video" bind:checked="{selectedCategories}" on:change="{applyFilter}">
    Videos
  </label>
</div>

{#if !loading}
  <div class="news-container">
    <div class="row g-4">
      {#each currentEntries as entry (entry.uid)}
        <div class="col-md-6">
          <div class="card">
            {#if entry.type === 'article' && entry.header_image}
              <img class="card-img-top" src={entry.header_image.url || 'default_image_url'} alt="" />
            {:else if entry.type !== 'article'}
              <img class="card-img-top" src={entry.thumbnail_high || entry.thumbnail_low} alt="" />
            {/if}
            <div class="card-body">
              <h5 class="card-title">{entry.title}</h5>
              <p class="card-text">
                <small class="text-muted">{entry.created_at}</small>
              </p>
              <button class="btn btn-primary btn-sm ms-2" on:click={() => shareOnTwitter(entry, 'Check out this news article! #LoLEsportsMag')}>
                <span class="icon">
                  <i class="bi bi-twitter"></i>
                </span>
                Share on Twitter
              </button>
              <button class="btn btn-info btn-sm ms-2" on:click={() => handleArticleClick(entry)}>
                Read More
              </button>
            </div>
          </div>
        </div>
      {/each}
    </div>
  </div>
{/if}

{#if entries.length > visibleEntries}
  <div class="text-center mt-4">
    <button class="btn btn-dark" on:click={handleLoadMore}>Load More</button>
  </div>
{/if}

<style>
.filter-bar {
  position: fixed;
  top: 60px;
  right: 20px;
  display: flex;
  flex-direction: column;
  background-color: #fff;
  padding: 10px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  justify-content: center;
}

.filter-title {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.filter-line {
  flex-grow: 1;
  height: 1px;
  background-color: #ccc;
  margin-right: 10px;
}

.filter-title h3 {
  margin: 0;
  font-size: 18px;
}

.filter-bar label {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  cursor: pointer;
}

.filter-bar input[type="checkbox"] {
  margin-right: 5px;
}

.news-container {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.card {
  width: 100%;
  margin-bottom: 20px;
}
</style>
